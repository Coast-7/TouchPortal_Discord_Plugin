"use strict";

const EventEmitter = require("events");
const net = require("net");

class TouchPortalClient extends EventEmitter {
  constructor(options = {}) {
    super();
    this.touchPortal = null;
    this.pluginId = null;
    this.socket = null;
  }

  stateUpdate(id, value) {
    this.send({ type: "stateUpdate", id: id, value: value });
  }

  sendArray(dataArray) {}

  send(data) {
    this.socket.write(JSON.stringify(data) + "\n");
  }

  pair() {
    const pairMsg = {
      type: "pair",
      id: this.pluginId,
    };
    this.send(pairMsg);
  }

  connect(options = {}) {
    let { pluginId } = options;
    this.pluginId = pluginId;
    console.log(this.pluginId);
    this.socket = new net.Socket();
    let that = this;
    this.socket.connect(12136, "127.0.0.1", function () {
      console.log("we are here");
      that.emit("connected");
      that.pair();
    });

    this.socket.on("data", function (data) {
      const message = JSON.parse(data);
      console.log("Received: " + data);

      //Handle internal TP Messages here, else pass to user code
      switch (message.type) {
        case "closePlugin":
          console.log(message.pluginId, that.pluginId);
          if (message.pluginId === that.pluginId) {
            that.emit("Close", message);
            console.log("received Close Plugin message, exiting in 5 seconds");
            setTimeout(() => {
              process.exit(9);
            }, 5000);
          }
          break;
        case "info":
          console.log("Info received we are here");
          that.emit("Info", message);
          break;
        default:
          that.emit("Message", message);
      }
    });

    this.socket.on("close", function () {
      console.log("Connection closed");
    });
  }
}

module.exports = TouchPortalClient;
